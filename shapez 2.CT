<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Init"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
[ENABLE]
if syntaxcheck then return end
function getParam(ea, offset)
  local ea_ = offset + ea;
  return readInteger(ea_, true) + ea_ + 4;
end

__aobScanModule_counter = 0
function aobScanModule(name, m, aob)
  local counter = __aobScanModule_counter
  __aobScanModule_counter = counter + 1

  local tmp_sym_key = ("_Tmp_Val_%d"):format(counter)
  AutoAssemble(([[
    aobscanmodule(%s,%s,%s)
    registersymbol(%s)
]]):format(tmp_sym_key, m, aob,tmp_sym_key))
  local res = getAddress(tmp_sym_key)
  if res == nil then
    error(("aob %s not found in %s"):format(name,m))
  end
  unregisterSymbol(tmp_sym_key)

  local i = -1
  local param_offset = nil
  local param_size = 0
  for segment in aob:gmatch("%S+") do
    i = i+1
    if segment == '*' then
      if param_offset == nil then
        param_offset = i
      end
      param_size = param_size + 1
    elseif param_offset ~= nil then
      break
    end
  end

  if param_offset ~= nil then
    local ea = res + param_offset
    local val = 0
    if param_size == 1 then
      val = readBytes(ea)
      if val &gt; 127 then
        val = val - 256
      end
    elseif param_size == 2 then
      val = readSmallInteger(ea,true)
    elseif param_size == 4 then
      val = readInteger(ea,true)
    else
      error(("Unknown param size %d"):format(param_size))
    end
    res = ea + param_size + val
  end

  if name ~=nil then
    registerSymbol(name, res)
  end
  return res
end

function findMonoFunctionWithSign(namespace, cls, method, sign)
  local methods = mono_class_enumMethods(mono_findClass(namespace,cls))
  for i = 1,#methods do
    if methods[i].name == method then
      if mono_method_getSignature(methods[i].method) == sign then
        return mono_compile_method(methods[i].method)
      end
    end
  end
  error(("cannot find method %s:%s:%s with sign "):format(namespace,cls,method,sign))
end

local function autoAttach(process_name)
	if process == process_name then
		return
	end
	if getProcessIDFromProcessName(process_name) ~= nil then
		openProcess(process_name)
	else
		error("process "..process_name.." not found")
	end
end


local function addCompactMenu()
	if compactmenualreadyexists then return end
	compactmenualreadyexists = 'yes'

	local parent = getMainForm().Menu.Items
	local compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem)
	compactmenuitem.Caption = 'Compact View Mode'
	compactmenuitem.OnClick = function(sender, force)
		local state = not (compactmenuitem.Caption == 'Compact View Mode')
		if force ~= nil then state = not force end
		compactmenuitem.Caption         = state and 'Compact View Mode' or 'Full View Mode'
		getMainForm().Splitter1.Visible = state
		getMainForm().Panel4.Visible    = state
		getMainForm().Panel5.Visible    = state
	end
end

local function main()
	addCompactMenu()
	autoAttach('shapez 2.exe')
    if not monopipe then
      if LaunchMonoDataCollector() == 0 then
        error(MessageDialog('Failed to Launch Mono Data Collector', mtError, mbClose))
      end
    end
end

main()


[DISABLE]




</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"NoUpgradeCost"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
local defs = [[
define(_ResearchCostManager_CanAfford,%x)
define(_ResearchCostManager_ConsumeCost,%x)
]]
if syntaxcheck then
  return defs:format(0,0)
else
  return defs:format(
    findMonoFunctionWithSign("","ResearchCostManager","CanAfford","IResearchCost"),
    findMonoFunctionWithSign("","ResearchCostManager","ConsumeCost","IResearchCost")
  )
end
{$asm}
alloc(no_upgrade_cost_alloc,2048,_ResearchCostManager_ConsumeCost)
label(can_afford_bk)
label(consume_bk)

no_upgrade_cost_alloc:
can_afford_bk:
readmem(_ResearchCostManager_CanAfford,10)
consume_bk:
readmem(_ResearchCostManager_ConsumeCost,10)

_ResearchCostManager_CanAfford:
mov rax, (int)1
ret

_ResearchCostManager_ConsumeCost:
ret

registersymbol(_ResearchCostManager_CanAfford,_ResearchCostManager_ConsumeCost,no_upgrade_cost_alloc,can_afford_bk,consume_bk)
 
 
[DISABLE]
_ResearchCostManager_CanAfford:
readmem(can_afford_bk,10)

_ResearchCostManager_ConsumeCost:
readmem(consume_bk,10)

dealloc(no_upgrade_cost_alloc)
unregistersymbol(_ResearchCostManager_CanAfford,_ResearchCostManager_ConsumeCost,no_upgrade_cost_alloc,can_afford_bk,consume_bk)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
  <Comments>Info about this table:
</Comments>
</CheatTable>
