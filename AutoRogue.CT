<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="46">
  <CheatEntries>
    <CheatEntry>
      <ID>2</ID>
      <Description>"mono patch"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
return (
  nyce.defMonoFunction(syntaxcheck,"_Mono_Method1", "","Mono","Method1") .. "\n" ..
  nyce.defMonoFunction(syntaxcheck,"_Mono_Method2", "","Mono","Method2","int,int,int")
)
{$asm}
alloc(mono_patch_alloc,1024,_Mono_Method1)
label(mono_patch_backup)
label(mono_patch_code)
label(mono_patch_return)

mono_patch_alloc:
mono_patch_code:
  mov eax, ecx
mono_patch_backup:
  readmem(_Mono_Method1,6) // hook inst
  jmp mono_patch_return

_Mono_Method1:
  jmp mono_patch_code  // near jump cost size 5
  nop 1  // pad
mono_patch_return:

registersymbol(_Mono_Method1,mono_patch_alloc,mono_patch_backup)
 
 
[DISABLE]
_Mono_Method1:
  readmem(mono_patch_backup,6)

dealloc(mono_patch_alloc)
unregistersymbol(_Mono_Method1,mono_patch_alloc,mono_patch_backup)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>114070</ID>
      <Description>"asm patch"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
return (
  nyce.defAobScanModule(syntaxcheck,"AsmPatch_at", "ProcessName","48 ? ? ? 48 ? ? ? ? ? ? 48 ? ? ? ? ? ? 44 ? ? 0f 29 70 ? 48 ? ? 48")
)
{$asm}
alloc(AsmPatch_alloc,$1000)
label(AsmPatch_code)
label(AsmPatch_return)
label(AsmPatch_vals)
label(AsmPatch_backup)

AsmPatch_alloc:
AsmPatch_vals:
  dq (int)10
AsmPatch_code:
  imul edx, [AsmPatch_vals]
AsmPatch_backup:
  readmem(AsmPatch_at,18)
  jmp AsmPatch_return

AsmPatch_at:
  db ff 25 00 00 00 00 // far jmp cost 14
  dq AsmPatch_code
  nop 4
AsmPatch_return:
registersymbol(AsmPatch_at,AsmPatch_alloc,AsmPatch_backup,AsmPatch_vals)

[DISABLE]

AsmPatch_at:
  readmem(AsmPatch_backup,18)

dealloc(AsmPatch_alloc)
unregistersymbol(AsmPatch_at,AsmPatch_alloc,AsmPatch_backup,AsmPatch_vals)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Init"</Description>
      <Options moHideChildren="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
[ENABLE]
package.loaded.ny_ce_utils = nil
nyce = require('ny_ce_utils')

local function main()
  nyce.addCompactMenu()
  nyce.autoAttach('AutoRogue.exe')
end

if syntaxcheck then return end
main()


[DISABLE]



</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>114071</ID>
          <Description>"BattleInstance"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
return (
  nyce.defMonoFunction(syntaxcheck,"_Battle__Update", "","Battle","Update")
)
{$asm}
alloc(hook_battle_update_alloc,1024,_Battle__Update)
label(hook_battle_update_data)
label(hook_battle_update_backup)
label(hook_battle_update_code)
label(hook_battle_update_return)

hook_battle_update_alloc:
hook_battle_update_data:
  dq 0
hook_battle_update_code:
  mov [hook_battle_update_data], rcx
hook_battle_update_backup:
  readmem(_Battle__Update,6) // hook inst
  jmp hook_battle_update_return

_Battle__Update:
  jmp hook_battle_update_code  // near jump cost size 5
  nop 1  // pad
hook_battle_update_return:

registersymbol(_Battle__Update,hook_battle_update_alloc,hook_battle_update_backup,hook_battle_update_data)

{$lua}
if not syntaxcheck then (function ()
  local mr = nyce.createMonoInstanceRecord({
    fields = {
        {path="player.Gold", name="Gold"},
        {path="Riroru_kaisu", name="Reroll"},
        {path="player"},
    },
    parent=mr,
    class=mono_findClass("", "Battle"),
  })
  mr.Description = "BattleData(Generated)"
  mr.ShowAsHex = true
  mr.Address = "hook_battle_update_data"
  mr.Type = vtQword
  mr.OffsetCount = 1
  mr.DontSave = true
  local al = getAddressList()
  mr:appendToEntry(memrec)
end)() end
return ""
{$asm}

[DISABLE]

{$lua}
if not syntaxcheck then (function()
  while memrec.Count &gt; 0 do
    memrec.Child[0].destroy()
  end
end)() end
return ""
{$asm}

_Battle__Update:
  readmem(hook_battle_update_backup,6)

dealloc(hook_battle_update_alloc)
unregistersymbol(_Battle__Update,hook_battle_update_alloc,hook_battle_update_backup,hook_battle_update_data)
</AssemblerScript>
          <CheatEntries/>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
