<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Init"</Description>
      <Options moHideChildren="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}
[ENABLE]
if syntaxcheck then return end
function getParam(ea, offset)
  local ea_ = offset + ea;
  return readInteger(ea_, true) + ea_ + 4;
end

__aobScanModule_counter = 0
function aobScanModule(name, m, aob)
  local counter = __aobScanModule_counter
  __aobScanModule_counter = counter + 1

  local tmp_sym_key = ("_Tmp_Val_%d"):format(counter)
  AutoAssemble(([[
    aobscanmodule(%s,%s,%s)
    registersymbol(%s)
]]):format(tmp_sym_key, m, aob,tmp_sym_key))
  local res = getAddress(tmp_sym_key)
  if res == nil then
    error(("aob %s not found in %s"):format(name,m))
  end
  unregisterSymbol(tmp_sym_key)

  local i = -1
  local param_offset = nil
  local param_size = 0
  for segment in aob:gmatch("%S+") do
    i = i+1
    if segment == '*' then
      if param_offset == nil then
        param_offset = i
      end
      param_size = param_size + 1
    elseif param_offset ~= nil then
      break
    end
  end

  if param_offset ~= nil then
    local ea = res + param_offset
    local val = 0
    if param_size == 1 then
      val = readBytes(ea)
      if val &gt; 127 then
        val = val - 256
      end
    elseif param_size == 2 then
      val = readSmallInteger(ea,true)
    elseif param_size == 4 then
      val = readInteger(ea,true)
    else
      error(("Unknown param size %d"):format(param_size))
    end
    res = ea + param_size + val
  end

  if name ~=nil then
    registerSymbol(name, res)
  end
  return res
end

function findMonoFunctionWithSign(namespace, cls, method, sign)
  local methods = mono_class_enumMethods(mono_findClass(namespace,cls))
  for i = 1,#methods do
    if methods[i].name == method then
      if mono_method_getSignature(methods[i].method) == sign then
        return mono_compile_method(methods[i].method)
      end
    end
  end
  error(("cannot find method %s:%s:%s with sign "):format(namespace,cls,method,sign))
end

local function autoAttach(process_name)
	if process == process_name then
		return
	end
	if getProcessIDFromProcessName(process_name) ~= nil then
		openProcess(process_name)
	else
		error("process "..process_name.." not found")
	end
end


local function addCompactMenu()
	if compactmenualreadyexists then return end
	compactmenualreadyexists = 'yes'

	local parent = getMainForm().Menu.Items
	local compactmenuitem = createMenuItem(parent); parent.add(compactmenuitem)
	compactmenuitem.Caption = 'Compact View Mode'
	compactmenuitem.OnClick = function(sender, force)
		local state = not (compactmenuitem.Caption == 'Compact View Mode')
		if force ~= nil then state = not force end
		compactmenuitem.Caption         = state and 'Compact View Mode' or 'Full View Mode'
		getMainForm().Splitter1.Visible = state
		getMainForm().Panel4.Visible    = state
		getMainForm().Panel5.Visible    = state
	end
end

local function main()
	addCompactMenu()
	autoAttach('SuicideSquad_KTJL.exe')
end

main()


[DISABLE]




</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"MoreBattlePass"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
local defs = [[
define(AddBattlePassPt_at,%x)
]]
if syntaxcheck then
  return defs:format(0)
else
  return defs:format(
    aobScanModule("AddBattlePassPt_at","SuicideSquad_KTJL.exe","48 ? ? ? 48 ? ? ? ? ? ? 48 ? ? ? ? ? ? 44 ? ? 0f 29 70 ? 48 ? ? 48")
  )
end
{$asm}
alloc(AddBattlePassPt_alloc,$1000)
label(AddBattlePassPt_code)
label(AddBattlePassPt_return)
label(AddBattlePassPt_vals)
label(AddBattlePassPt_backup)

AddBattlePassPt_alloc:
AddBattlePassPt_vals:
  dq (int)10
AddBattlePassPt_code:
  imul edx, [AddBattlePassPt_vals]
AddBattlePassPt_backup:
  readmem(AddBattlePassPt_at,18)
  jmp AddBattlePassPt_return

AddBattlePassPt_at:
  // jmp [rip]
  db ff 25 00 00 00 00
  dq AddBattlePassPt_code
  nop 4
AddBattlePassPt_return:
registersymbol(AddBattlePassPt_at,AddBattlePassPt_backup,AddBattlePassPt_vals)

[DISABLE]

AddBattlePassPt_at:
  readmem(AddBattlePassPt_backup,18)

unregistersymbol(AddBattlePassPt_at,AddBattlePassPt_backup,AddBattlePassPt_vals)
dealloc(AddBattlePassPt_alloc)

{
// ORIGINAL CODE - INJECTION POINT: SuicideSquad_KTJL.exe.arch+494BA0D

SuicideSquad_KTJL.exe.arch+494B9F8: 48 8B C4              - mov rax,rsp
SuicideSquad_KTJL.exe.arch+494B9FB: 48 89 58 08           - mov [rax+08],rbx
SuicideSquad_KTJL.exe.arch+494B9FF: 89 50 10              - mov [rax+10],edx
SuicideSquad_KTJL.exe.arch+494BA02: 55                    - push rbp
SuicideSquad_KTJL.exe.arch+494BA03: 56                    - push rsi
SuicideSquad_KTJL.exe.arch+494BA04: 57                    - push rdi
SuicideSquad_KTJL.exe.arch+494BA05: 41 54                 - push r12
SuicideSquad_KTJL.exe.arch+494BA07: 41 55                 - push r13
SuicideSquad_KTJL.exe.arch+494BA09: 41 56                 - push r14
SuicideSquad_KTJL.exe.arch+494BA0B: 41 57                 - push r15
// ---------- INJECTING HERE ----------
SuicideSquad_KTJL.exe.arch+494BA0D: 48 8D 68 A1           - lea rbp,[rax-5F]
// ---------- DONE INJECTING  ----------
SuicideSquad_KTJL.exe.arch+494BA11: 48 81 EC E0 00 00 00  - sub rsp,000000E0
SuicideSquad_KTJL.exe.arch+494BA18: 48 8B B9 B8 00 00 00  - mov rdi,[rcx+000000B8]
SuicideSquad_KTJL.exe.arch+494BA1F: 44 8B F2              - mov r14d,edx
SuicideSquad_KTJL.exe.arch+494BA22: 0F 29 70 B8           - movaps [rax-48],xmm6
SuicideSquad_KTJL.exe.arch+494BA26: 48 8B D9              - mov rbx,rcx
SuicideSquad_KTJL.exe.arch+494BA29: 48 85 FF              - test rdi,rdi
SuicideSquad_KTJL.exe.arch+494BA2C: 0F 84 8B 06 00 00     - je SuicideSquad_KTJL.exe.arch+494C0BD
SuicideSquad_KTJL.exe.arch+494BA32: 48 8B 05 0F 10 67 04  - mov rax,[SuicideSquad_KTJL.exe+8FBDA48]
SuicideSquad_KTJL.exe.arch+494BA39: 48 85 C0              - test rax,rax
SuicideSquad_KTJL.exe.arch+494BA3C: 75 05                 - jne SuicideSquad_KTJL.exe.arch+494BA43
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>4</ID>
              <Description>"multiplyer"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>AddBattlePassPt_vals</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>17</ID>
          <Description>"DifficultyXp"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
local defs = [[
define(AddDifficultyXp_at,%x)
]]
if syntaxcheck then
  return defs:format(0)
else
  return defs:format(
    aobScanModule("AddDifficultyXp_at","SuicideSquad_KTJL.exe","0F 5B C0 F3 0F 58 C1 F3 0F 2C C0")
  )
end
{$asm}
alloc(AddDifficultyXp_alloc,$1000)
label(AddDifficultyXp_code)
label(AddDifficultyXp_return)
label(AddDifficultyXp_vals)
label(AddDifficultyXp_backup)

AddDifficultyXp_alloc:
AddDifficultyXp_vals:
  dq (float)10
AddDifficultyXp_code:
  mulss xmm1, dword ptr [AddDifficultyXp_vals]
AddDifficultyXp_backup:
  readmem(AddDifficultyXp_at,17)
  jmp AddDifficultyXp_return

AddDifficultyXp_at:
  // jmp [rip]
  db ff 25 00 00 00 00
  dq AddDifficultyXp_code
  nop 3
AddDifficultyXp_return:
registersymbol(AddDifficultyXp_at,AddDifficultyXp_backup,AddDifficultyXp_vals)

[DISABLE]

AddDifficultyXp_at:
  readmem(AddDifficultyXp_backup,17)

unregistersymbol(AddDifficultyXp_at,AddDifficultyXp_backup,AddDifficultyXp_vals)
dealloc(AddDifficultyXp_alloc)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>18</ID>
              <Description>"multiplyer"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>AddDifficultyXp_vals</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"StageXp"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
local defs = [[
define(AddStageXp_at,%x)
]]
if syntaxcheck then
  return defs:format(0)
else
  return defs:format(
    aobScanModule("AddStageXp_at","SuicideSquad_KTJL.exe","7e ? 49 ? ? e8 ? ? ? ? 8b ? 49 ? ? e8 * * * *")
  )
end
{$asm}
alloc(AddStageXp_alloc,$1000)
label(AddStageXp_code)
label(AddStageXp_return)
label(AddStageXp_vals)
label(AddStageXp_backup)

AddStageXp_alloc:
AddStageXp_vals:
  dq (int)10
AddStageXp_code:
  imul r8d, [AddStageXp_vals]
AddStageXp_backup:
  readmem(AddStageXp_at,15)
  jmp AddStageXp_return

AddStageXp_at:
  // jmp [rip]
  db ff 25 00 00 00 00
  dq AddStageXp_code
  nop 1
AddStageXp_return:
registersymbol(AddStageXp_at,AddStageXp_backup,AddStageXp_vals)

[DISABLE]

AddStageXp_at:
  readmem(AddStageXp_backup,15)

unregistersymbol(AddStageXp_at,AddStageXp_backup,AddStageXp_vals)
dealloc(AddStageXp_alloc)
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>20</ID>
              <Description>"multiplyer"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>AddStageXp_vals</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"LoadWeapon"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
local defs = [[
define(_LoadedWeapon_at,%x)
]]
if syntaxcheck then
  return defs:format(0)
else
  return defs:format(
    aobScanModule("_LoadedWeapon_at","SuicideSquad_KTJL.exe","e8 * * * * 44 38 63 ? 74 ? 4c 39 a7 ? ? ? ?")
  )
end
{$asm}
define(LoadedWeapon_at,_LoadedWeapon_at+9)
alloc(LoadedWeapon_alloc,$1000)
label(LoadedWeapon_code)
label(LoadedWeapon_return)
label(LoadedWeapon_vals)
label(LoadedWeapon_backup)

LoadedWeapon_alloc:
LoadedWeapon_vals:
  dq 0
LoadedWeapon_code:
  mov [LoadedWeapon_vals], rcx
LoadedWeapon_backup:
  readmem(LoadedWeapon_at,15)
  jmp LoadedWeapon_return

LoadedWeapon_at:
  // jmp [rip]
  db ff 25 00 00 00 00
  dq LoadedWeapon_code
  nop 1
LoadedWeapon_return:
registersymbol(LoadedWeapon_at,LoadedWeapon_backup,LoadedWeapon_vals)

[DISABLE]

LoadedWeapon_at:
  readmem(LoadedWeapon_backup,15)

unregistersymbol(LoadedWeapon_at,LoadedWeapon_backup,LoadedWeapon_vals)
dealloc(LoadedWeapon_alloc)

// + 0x228 addons write on e8 * * * * 48 ? ? 48 ? ? ff 90 ? ? ? ? 4c ? ? ? ? ? ? c6 44 24 ? ? 4c ? ? 48 ? ? ? ? e8 ? ? ? ? 48 ? ? ? ? 48 ? ?
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>6</ID>
              <Description>"weapon_address"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>8 Bytes</VariableType>
              <Address>LoadedWeapon_vals</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>12</ID>
              <Description>"reroll times"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>LoadedWeapon_vals</Address>
              <Offsets>
                <Offset>+294</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>15</ID>
              <Description>"buy times"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>LoadedWeapon_vals</Address>
              <Offsets>
                <Offset>290</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>16</ID>
              <Description>"replace times"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>LoadedWeapon_vals</Address>
              <Offsets>
                <Offset>1d0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>13</ID>
              <Description>"reroll single time"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>LoadedWeapon_vals</Address>
              <Offsets>
                <Offset>288</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>7</ID>
              <Description>"addon count"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>LoadedWeapon_vals</Address>
              <Offsets>
                <Offset>230</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>8</ID>
              <Description>"addons"</Description>
              <ShowAsHex>1</ShowAsHex>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>8 Bytes</VariableType>
              <Address>LoadedWeapon_vals</Address>
              <Offsets>
                <Offset>228</Offset>
              </Offsets>
              <CheatEntries>
                <CheatEntry>
                  <ID>9</ID>
                  <Description>"addon 1"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>+0</Address>
                  <Offsets>
                    <Offset>+0</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>10</ID>
                  <Description>"addon 2"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>+0</Address>
                  <Offsets>
                    <Offset>30</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>11</ID>
                  <Description>"addon 3"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>+0</Address>
                  <Offsets>
                    <Offset>+60</Offset>
                  </Offsets>
                </CheatEntry>
                <CheatEntry>
                  <ID>14</ID>
                  <Description>"addon 4"</Description>
                  <ShowAsHex>1</ShowAsHex>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>8 Bytes</VariableType>
                  <Address>+0</Address>
                  <Offsets>
                    <Offset>90</Offset>
                  </Offsets>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>_LoadedWeapon_at</Name>
      <Address>144A4A37C</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <Comments>Info about this table:
</Comments>
</CheatTable>
